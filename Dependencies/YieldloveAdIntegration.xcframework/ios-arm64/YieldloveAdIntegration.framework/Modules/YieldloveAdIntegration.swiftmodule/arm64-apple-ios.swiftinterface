// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name YieldloveAdIntegration
import AdSupport
import CoreGraphics
import CriteoPublisherSdk
import Foundation
import GoogleMobileAds
import PrebidMobile
import PromiseKit
import Swift
import WebKit
@_exported import YieldloveAdIntegration
import YieldloveExternalConfiguration
import _Concurrency
public protocol URLSessionProtocol {
  func dataTask(with request: Foundation.URLRequest)
}
extension Foundation.URLSession : YieldloveAdIntegration.URLSessionProtocol {
  public func dataTask(with request: Foundation.URLRequest)
}
@objc public class YLBannerView : ObjectiveC.NSObject {
  @objc public init(bannerView: GoogleMobileAds.GADBannerView)
  @objc public func setPrebidCacheId(prebidCacheId: Swift.String?)
  @objc public func getPrebidCacheId() -> Swift.String?
  @objc public func getPrebidAdSize() -> CoreGraphics.CGSize
  @objc public func setPrebidAdSize(prebidAdSize: CoreGraphics.CGSize)
  @objc public func getCriteoAdSize() -> CoreGraphics.CGSize
  @objc public func setCriteoAdSize(criteoAdSize: CoreGraphics.CGSize)
  @objc public func getBannerView() -> GoogleMobileAds.GADBannerView
  @objc deinit
}
@_hasMissingDesignatedInitializers public class YLCGSizeConverter {
  public static func getCGSize(for wxh: Swift.String?) -> CoreGraphics.CGSize
  @objc deinit
}
public typealias DateGenerator = () -> Foundation.Date
public protocol TimeSession : Swift.Encodable {
  var startingPoint: Foundation.Date? { get set }
  var dateGenerator: YieldloveAdIntegration.DateGenerator { get }
  func recordEvent(event: YieldloveAdIntegration.TimeEvent) throws
  func start() throws
  func stop() throws
}
@_hasMissingDesignatedInitializers public class RelativeTimeSession : YieldloveAdIntegration.TimeSession, Swift.Encodable {
  public var startingPoint: Foundation.Date?
  final public let dateGenerator: () -> Foundation.Date
  public func start() throws
  public func stop() throws
  public func recordEvent(event: YieldloveAdIntegration.TimeEvent) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public enum MonitoredAdType : Swift.String, Swift.Encodable {
  case banner
  case interstitial
  public static func convert(adType: YieldloveExternalConfiguration.AdType) -> YieldloveAdIntegration.MonitoredAdType
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Connection : Swift.String, Swift.Encodable {
  case mobile
  case wifi
  case other
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum BiddingAdapter : Swift.String, Swift.Encodable {
  case Prebid
  case Criteo
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum BidAdapterResultCode : Swift.String, Swift.Encodable {
  case SUCCESS
  case NO_BIDS
  case TIMEOUT
  case FAILED
  case NOT_AVAILABLE
  case SKIPPED
  public static func fromPrebidResultCode(code: PrebidMobile.ResultCode) -> YieldloveAdIntegration.BidAdapterResultCode
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol TimeSessionWrapper {
  func startSession()
  func stopSession()
  func recordAdUnitLoaded()
  func recordRequestBids(bidAdapter: YieldloveAdIntegration.BiddingAdapter)
  func recordBidderRespondedSuccessfully(bidAdapter: YieldloveAdIntegration.BiddingAdapter, resultCode: YieldloveAdIntegration.BidAdapterResultCode)
  func recordGamRequested()
  func recordGamRespondedSuccessfully()
  func recordGamRespondedWithError(error: Swift.Error)
  func recordAdAnalyzed(winner: Swift.String)
  func getWrappedSession() -> YieldloveAdIntegration.TimeSession
}
public class YLTimeSession : YieldloveAdIntegration.TimeSessionWrapper {
  public func getWrappedSession() -> YieldloveAdIntegration.TimeSession
  public init(adType: YieldloveAdIntegration.MonitoredAdType, connection: YieldloveAdIntegration.Connection, debug: Swift.Bool)
  public func startSession()
  public func stopSession()
  public func recordAdUnitLoaded()
  public func recordRequestBids(bidAdapter: YieldloveAdIntegration.BiddingAdapter)
  public func recordBidderRespondedSuccessfully(bidAdapter: YieldloveAdIntegration.BiddingAdapter, resultCode: YieldloveAdIntegration.BidAdapterResultCode)
  public func recordGamRequested()
  public func recordGamRespondedSuccessfully()
  public func recordGamRespondedWithError(error: Swift.Error)
  public func recordAdAnalyzed(winner: Swift.String)
  @objc deinit
}
public typealias GetAdSizesCompletion = (_ adSizes: Foundation.NSArray, _ error: Swift.Error?) -> Swift.Void
public typealias InterstitialCompletion = (_ ad: GoogleMobileAds.GAMInterstitialAd?, _ error: Swift.Error?) -> Swift.Void
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class Yieldlove : ObjectiveC.NSObject {
  @objc public static let instance: YieldloveAdIntegration.Yieldlove
  @objc public var adRequest: GoogleMobileAds.GAMRequest
  @objc public class func setup(appName: Swift.String)
  @objc public func enableDebug(isEnabled: Swift.Bool)
  @objc public func bannerAd(adSlotId: Swift.String, viewController: UIKit.UIViewController, delegate: YieldloveAdIntegration.YLBannerViewDelegate)
  @objc public func interstitialAd(adSlotId: Swift.String, completion: @escaping YieldloveAdIntegration.InterstitialCompletion, request: GoogleMobileAds.GAMRequest? = GAMRequest())
  @objc public func resizeBanner(banner: YieldloveAdIntegration.YLBannerView, handler: (() -> Swift.Void)? = {})
  @objc public func getAdSizes(adSlotId: Swift.String, completion: @escaping YieldloveAdIntegration.GetAdSizesCompletion)
  @objc deinit
}
@objc public protocol YLBannerViewDelegate {
  @objc optional func bannerViewDidReceiveAd(_ bannerView: YieldloveAdIntegration.YLBannerView)
  @objc optional func bannerView(_ bannerView: YieldloveAdIntegration.YLBannerView, didFailToReceiveAdWithError error: Swift.Error)
  @objc optional func bannerViewWillPresentScreen(_ bannerView: YieldloveAdIntegration.YLBannerView)
  @objc optional func bannerViewWillDismissScreen(_ bannerView: YieldloveAdIntegration.YLBannerView)
  @objc optional func bannerViewDidDismissScreen(_ bannerView: YieldloveAdIntegration.YLBannerView)
  @objc optional func getGAMRequest() -> GoogleMobileAds.GAMRequest
}
public struct MonitoringConstants {
  public static let iabStroeerSSPVendorId: Swift.Int
  public static let iabStroeerVendorId: Swift.Int
  public static let iabPurposeStoreAccessInformationOnDeviceId: Swift.Int
  public static let iabPurposeProductDevelopmentId: Swift.Int
}
public protocol SessionsCollector {
  func collect(session: YieldloveAdIntegration.TimeSession)
}
public protocol MonitoringConsentEvaluator {
  func canReportTimeSessions() -> Swift.Bool
}
public class YLTimeSessionsCollector : YieldloveAdIntegration.SessionsCollector {
  public static let sessionsUserDefaultsKey: Swift.String
  public static let reporterLastCalledDateUserDefaultsKey: Swift.String
  public init(reporter: YieldloveAdIntegration.MonitoringReporter, consentEvaluator: YieldloveAdIntegration.MonitoringConsentEvaluator, settings: YieldloveExternalConfiguration.MonitoringData)
  @objc deinit
  public func collect(session: YieldloveAdIntegration.TimeSession)
}
@objc @_hasMissingDesignatedInitializers public class AdSlotConfigurationError : Foundation.NSError {
  public init(_ error: Swift.Error)
  @objc deinit
}
public protocol Event {
  var typeName: Swift.String { get }
  var timeSinceMeasuringStarted: Swift.Int { get set }
}
@_hasMissingDesignatedInitializers public class TimeEvent : YieldloveAdIntegration.Event, Swift.Encodable {
  public var typeName: Swift.String {
    get
  }
  public var timeSinceMeasuringStarted: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public protocol MonitoringReporter {
  func report(sessions: [Swift.String])
}
public class HttpMonitoringReporter : YieldloveAdIntegration.MonitoringReporter {
  public static let httpMethod: Swift.String
  public static let apiKeyHeaderName: Swift.String
  public static let contentType: Swift.String
  public static let contentTypeHeaderName: Swift.String
  public init(appName: Swift.String, sdkVersion: Swift.String, apiKey: Swift.String, url: Swift.String, urlSession: YieldloveAdIntegration.URLSessionProtocol = URLSession.shared)
  public func report(sessions: [Swift.String])
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class YLConfig : ObjectiveC.NSObject {
  public static func getProductionConfig(appName: Swift.String) -> YieldloveAdIntegration.YLConfig
  @objc deinit
}
extension YieldloveAdIntegration.MonitoredAdType : Swift.Equatable {}
extension YieldloveAdIntegration.MonitoredAdType : Swift.Hashable {}
extension YieldloveAdIntegration.MonitoredAdType : Swift.RawRepresentable {}
extension YieldloveAdIntegration.Connection : Swift.Equatable {}
extension YieldloveAdIntegration.Connection : Swift.Hashable {}
extension YieldloveAdIntegration.Connection : Swift.RawRepresentable {}
extension YieldloveAdIntegration.BiddingAdapter : Swift.Equatable {}
extension YieldloveAdIntegration.BiddingAdapter : Swift.Hashable {}
extension YieldloveAdIntegration.BiddingAdapter : Swift.RawRepresentable {}
extension YieldloveAdIntegration.BidAdapterResultCode : Swift.Equatable {}
extension YieldloveAdIntegration.BidAdapterResultCode : Swift.Hashable {}
extension YieldloveAdIntegration.BidAdapterResultCode : Swift.RawRepresentable {}
