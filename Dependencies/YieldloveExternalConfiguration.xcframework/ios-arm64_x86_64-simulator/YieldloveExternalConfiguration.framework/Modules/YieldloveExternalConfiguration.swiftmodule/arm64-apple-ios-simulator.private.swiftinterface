// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name YieldloveExternalConfiguration
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreGraphics
import Foundation
import PromiseKit
import Swift
@_exported import YieldloveExternalConfiguration
import _Concurrency
import _StringProcessing
public struct BannerSizes {
  public init(bannerSizes: [CoreFoundation.CGSize] = [], gadBannerSizes: [Swift.String] = [])
  public var bannerSizes: [CoreFoundation.CGSize]
  public var gadBannerSizes: [Swift.String]
}
extension PromiseKit.Promise where T == Any {
  public static func runOnAnotherThread<T>(call: @escaping () throws -> T) -> PromiseKit.Promise<T>
}
@_hasMissingDesignatedInitializers public class ExternalConfigurationManager : YieldloveExternalConfiguration.ConfigurationManager {
  public func getAdUnitData(publisherAdSlot: Swift.String, adType: YieldloveExternalConfiguration.AdType) -> PromiseKit.Promise<YieldloveExternalConfiguration.ConfigurableAdUnitData>
  public func getConsentData(overrideProperties: Swift.String? = nil) -> PromiseKit.Promise<YieldloveExternalConfiguration.ConfigurableConsentData>
  public func getMonitoringData() -> PromiseKit.Promise<YieldloveExternalConfiguration.MonitoringData>
  public func clearConfigurationCache()
  @objc deinit
}
public protocol ConfigurableAdUnitData {
  var adUnit: Swift.String { get set }
  var configId: Swift.String { get set }
  var sizes: YieldloveExternalConfiguration.BannerSizes? { get set }
  var keyValueTargeting: [Swift.String : Swift.String] { get set }
  var accountId: Swift.String? { get set }
  var skipPrebid: Swift.Bool { get set }
  var criteoPublisherId: Swift.String? { get set }
  var storeUrl: Swift.String? { get set }
  var itunesID: Swift.String? { get set }
  var openRtbApi: [Swift.Int]? { get set }
  var autoRefreshTimeMs: Swift.Int? { get set }
}
@_hasMissingDesignatedInitializers public class ConfigTimestampUserDefaultsDao {
  public static let externalConfigLastFetchInMsKey: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ExternalConfigurationManagerBuilder {
  public static let instance: YieldloveExternalConfiguration.ExternalConfigurationManagerBuilder
  public var debug: Swift.Bool
  public var appName: Swift.String?
  public var externalConfigurationManager: YieldloveExternalConfiguration.ConfigurationManager
  @objc deinit
}
public protocol ConfigurationManager {
  func getAdUnitData(publisherAdSlot: Swift.String, adType: YieldloveExternalConfiguration.AdType) -> PromiseKit.Promise<YieldloveExternalConfiguration.ConfigurableAdUnitData>
  func getConsentData(overrideProperties: Swift.String?) -> PromiseKit.Promise<YieldloveExternalConfiguration.ConfigurableConsentData>
  func getMonitoringData() -> PromiseKit.Promise<YieldloveExternalConfiguration.MonitoringData>
  func clearConfigurationCache()
}
public enum AdType {
  case bannerAd
  case interstitial
  case rewarded
  public var isBannerAd: Swift.Bool {
    get
  }
  public static func == (a: YieldloveExternalConfiguration.AdType, b: YieldloveExternalConfiguration.AdType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class ConfigUserDefaultsDao {
  public static let configUserDefaultsKey: Swift.String
  @objc deinit
}
public protocol MonitoringData {
  var active: Swift.Bool { get }
  var sendingIntervalMs: Swift.Int { get }
  var maxSessionsForSending: Swift.Int { get }
  var frequency: Swift.Int { get }
}
public typealias ReqSenderCompletionHandler = (_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void
public struct RequestSenderResponse {
  public init(data: Foundation.Data?, response: Foundation.URLResponse?)
  public let data: Foundation.Data?
  public let response: Foundation.URLResponse?
  public func isSuccessfulHttpResponse() -> Swift.Bool
}
public enum RequestSenderError : Foundation.LocalizedError {
  case invalidRequestUrl(invalidUrl: Swift.String)
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol RequestSender {
  func get(url: Swift.String, headers: [Swift.String : Swift.String]) -> PromiseKit.Promise<YieldloveExternalConfiguration.RequestSenderResponse>
  func post(url: Swift.String, body: Foundation.Data?, headers: [Swift.String : Swift.String]) -> PromiseKit.Promise<YieldloveExternalConfiguration.RequestSenderResponse>
}
extension YieldloveExternalConfiguration.RequestSender {
  public func get(url: Swift.String, headers: [Swift.String : Swift.String] = [:]) -> PromiseKit.Promise<YieldloveExternalConfiguration.RequestSenderResponse>
  public func post(url: Swift.String, body: Foundation.Data?, headers: [Swift.String : Swift.String] = [:]) -> PromiseKit.Promise<YieldloveExternalConfiguration.RequestSenderResponse>
}
public class HttpRequestSender : YieldloveExternalConfiguration.RequestSender {
  public static let httpMethodGet: Swift.String
  public static let httpMethodPost: Swift.String
  public init(dispatchQueue: Dispatch.DispatchQueue = DispatchQueue.global(qos: .default), configuration: Foundation.URLSessionConfiguration = .default)
  public func get(url: Swift.String, headers: [Swift.String : Swift.String] = [:]) -> PromiseKit.Promise<YieldloveExternalConfiguration.RequestSenderResponse>
  public func post(url: Swift.String, body: Foundation.Data?, headers: [Swift.String : Swift.String] = [:]) -> PromiseKit.Promise<YieldloveExternalConfiguration.RequestSenderResponse>
  @objc deinit
}
public protocol ConfigurableConsentData {
  var accountId: Swift.String { get set }
  var isActive: Swift.Bool { get set }
  var propertyId: Swift.Int { get set }
  var propertyName: Swift.String { get set }
  var privacyManagerId: Swift.String { get set }
}
extension YieldloveExternalConfiguration.AdType : Swift.Equatable {}
extension YieldloveExternalConfiguration.AdType : Swift.Hashable {}
